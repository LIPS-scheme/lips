<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="utf-8" />
    <title>LIPS: Powerful Scheme based lisp interpreter in JavaScript</title>
    <link rel="canonical" href="https://lips.js.org/" />
    <meta name="Description" content="Modern and powerful lisp language written in JavaScript with literal regexes, that hide use of promises, full access to JavaScript, lisp macro system and hygienic macros."/>
{{HEAD}}
  <section id="summary">
    <header><h2>Summary</h2></header>
    <p>LIPS is poweful <a href="https://www.scheme.org/">Scheme</a> based lisp interpreter written in JavaScript. The name is recursive acronym which stands for <strong>LIPS Is Pretty Simple</strong>. The interpreter have very good integration with JavaScript. The aim of the project is to support full Specification <a href="https://standards.scheme.org/#r7rs">R7RS</a> of Scheme Programming Language.</p>
    <p>Key features of the interpreter:</p>
    <ul>
      <li>Literal regular expression.</li>
      <li>Great integration with JavaScript. You can use any JS library out of the box.</li>
      <li>Asynchronous execution (auto resolving of promises with optional promise quotation).</li>
      <li>Functional helpers (implementation inspired by <a href="https://ramdajs.com/">RamdaJS</a>)</li>
      <li>Possibility modify the parser at runtime (add new syntax, similar to vectors and object).</li>
      <li>Possibility to set represention of new data types for write and display.
          Witth parser extensions you can make new data types have different syntax and still be homoicoic.</li>
      <li>Small JavaScript core with Standard Library implemented in basic Scheme.</li>
      <li>Full support of Unicode and Emoji.</li>
      <li>Support for <a href="https://en.wikipedia.org/wiki/SXML">SXML</a>, that allow to write <a href="https://en.wikipedia.org/wiki/JSX_(JavaScript)">JSX</a> e.g. with <a href="https://preactjs.com/">Preact</a> or <a href="https://react.dev/">React</a> apps.</li>
      <li>I/O Ports supports in browser with <a href="https://github.com/jvilk/BrowserFS">BrowserFS</a>.</li>
      <li>Binary Compiler that speed up the parsing of big files (e.g. standard library).</li>
      <li>Fully implemented numerical tower and Big Integer support.</li>
      <li>Powerful introspection (similar to the one in Python).</li>
      <li>Auto formatting of lisp code (pretty print).</li>
      <li>Lisp/hygienic macros and macroexpand.</li>
      <li>Builtin help system.</li>
    </ul>
  </section>
  <section id="demo">
    <header id="beta"><h2>1.0.0 Beta Demo</h2></header>
    <p>Check <a href="https://github.com/jcubic/lips/wiki/Everything-you-need-to-know-about-Scheme">Everything you need to know about Scheme</a> and try the interpreter while you will read the document.</p>
    <p>You can also look at <a href="https://github.com/jcubic/lips/wiki/v1.0.0">Doumentation for 1.0.0</a> (WIP).</p>
    <div class="tabs">
      <ul>
        <li><a href="#">lexical</a></li>
        <li><a href="#">dynamic</a>
      </ul>
      <div class="panels">
        <div class="term lexical active">
        </div>
        <div class="term dynamic">
        </div>
      </div>
    </div>
  </section>
  <section id="bookmark">
    <header><h2>Bookmarklet</h2></header>
    <p>When you're learning Scheme language, you can run the REPL directly on any page that
       have Scheme tutorial you're learning from. It even work with PDF files and new empty tab
      (at least in Chrome). Drag this link <a id="bookmark_link">LIPS REPL</a> to your bookmarks. When you click on the bookmark it will run the interpreter. You can also just click the link.</p>
    <p>The bookmark can also be used to add REPL to your LIPS Web application.</p>
    <p>It may also not work no sites that are protected with
      <a href="https://en.wikipedia.org/wiki/Content_Security_Policy">Content Security Policy</a></p>
    <script>
    (function() {
    var url = 'https://cdn.jsdelivr.net/gh/jcubic/lips@master/lib/js/bookmark.js';
    fetch(url).then(function(res) {
        return res.text();
    }).then(function(text) {
        var link = document.querySelector('#bookmark_link');
        link.setAttribute('href', text);
    });
    })();
    </script>
  </section>
  <section id="video">
    <header><h2>Video Presentation</h2></header>
    <a href="https://fosdem.org/2023/schedule/event/lipsscheme/"><img src="https://github.com/jcubic/lips/blob/master/assets/fosdem-intro.png?raw=true" alt="FOSDEM 2023 - LIPS Scheme: Powerful introspection and extensibility"/></a>
  </section>
  <section id="installation">
    <header><h2>Browser</h2></header>
    <p>When using LIPS Scheme interpreter in browser you need to include the main script file.</p>
    <p>If you want to use Webpack see <a href="https://github.com/jcubic/lips/wiki/Webpack">wiki page</a> for details.</p>
    <pre><code class="language-markup">
&lt;script src="https://unpkg.com/@jcubic/lips@beta/dist/lips.min.js"&gt;&lt;/script&gt;
    </code></pre>
    <p>or jsDelivr that is somewhat faster:</p>
    <pre><code class="language-markup">
&lt;script src="https://cdn.jsdelivr.net/npm/@jcubic/lips@beta/dist/lips.min.js"&gt;&lt;/script&gt;
    </code></pre>
    <p>You can put LIPS code directly in script tag:</p>
    <pre><code class="language-markup">
&lt;script type="text/x-scheme" bootstrap&gt;
(let ((what "world")
      (greet "hello"))
   (display (string-append "hello" " " what)))
&lt;/script&gt;
    </code></pre>
    <p><strong>NOTE:</strong> If you want to load standard library, you should use bootstrap attribute that will load it for you. You can optionaly specify the location of the file.</p>
    <p>You can also use src attribute to link to source file.</p>
    <pre><code class="language-html">
&lt;script type="text/x-scheme" src="example.scm"&gt;&lt;script&gt;
    </code></pre>
    <header><h2>Node</h2></header>
    <img src="https://github.com/jcubic/lips/raw/master/assets/screencast.gif?raw=true" alt="Terminal with LIPS Scheme interprer"/>
    <pre><code class="language-bash">
npm install -g @jcubic/lips@beta
    </code></pre>
    <pre><code class="language-bash">
## if installed as global just use
lips
lips foo.scm
## you can also run code as string
lips -e '(print "hello world")'
    </code></pre>
    <p>You can also write scripts using LIPS with <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a></p>
    <p>Crete file foo.scm</p>
    <pre><code class="language-scheme">
#!/usr/bin/env lips
(let ((what "World"))
  (print (string-append "Hello " what)))
    </code></pre>
    <p>Then run</p>
    <pre><code class="language-bash">
chmod a+x foo.scm
./foo.scm # or just foo.lips depend on your $PATH
    </code></pre>
    <header><h2>Direct API</h2></header>
    <p>You can also run execute LIPS programaticaly (in Node.js/Webpack).</p>
    <pre><code class="language-javascript">
var { exec } = require('@jcubic/lips');
// or
import { exec } from '@jcubic/lips';
    </code></pre>
    <p>Then use it like this:</p>
    <pre><code class="language-javascript">
exec('(let ((a 10) (b 20)) (* a b))').then(result => {
    results.forEach(function(result) {
        if (typeof result !== 'undefined') {
            console.log(result.toString());
        }
    });
});
    </code></pre>
  </section>
  {{FOOTER}}
  <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/browserfs@1.x.x/dist/browserfs.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@jcubic/lips@beta/dist/lips.min.js" bootstrap="https://cdn.jsdelivr.net/npm/@jcubic/lips@beta/dist/std.xcb"></script>
  <script src="https://cdn.jsdelivr.net/combine/npm/jquery,npm/jquery.terminal/js/jquery.terminal.min.js,npm/js-polyfills/keyboard.js,npm/prismjs/prism.js,npm/jquery.terminal/js/prism.js,npm/prismjs/components/prism-scheme.min.js,npm/prismjs/components/prism-javascript.min.js,npm/prismjs/components/prism-markup.min.js,npm/prismjs/components/prism-bash.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@jcubic/lips@beta/lib/js/terminal.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@jcubic/lips@beta/lib/js/prism.js"></script>
  <style>
   .token.operator, .token.entity, .token.url, .language-css .token.string, .style .token.string {
       background: inherit;
   }
   .terminal span.token.boolean {
       font-weight: normal !important;
       color: inherit !important;
   }
   .terminal token.comment,
   .terminal .token.block-comment {
       color: #3d464f;
   }
  </style>
  <script>
   function interpreter(selector, dynamic) {
       var term = terminal({ selector, dynamic, name: 'demo', lips });
       var banner = 'LIPS Demo version ' + lips.version + ' with [[b;#fff;]' +
           (dynamic ? 'dynamic' : 'lexical') + ' scope]\ntype (env) to see ' +
           'environment with functions macros and variables\nYou can also u' +
           'se (help obj) to display help for specic function or macro.\nUs' +
           'e (dir name) to get list of JavaScript properties and (apropos ' +
           'name)\nto display list of matched names in environment.\n';
       banner = banner.replace(/(\((?:env|dir|help|apropos)[^)]*\))/g, function(code) {
           return $.terminal.prism("scheme", code, {echo: true});
       });
       term.echo(banner, { formatters: false });
   }
   $(function() {

       function select(li) {
           li = $(li);
           var index = li.index();
           li.addClass('active')
             .siblings().removeClass('active');
           var term = tabs.find('.panels').children().eq(index)
                          .addClass('active');
           term.siblings().removeClass('active');
           return term;
       }
       var tabs = $('.tabs');
       select(tabs.find('ul li:eq(0)'));

       $.terminal.syntax("scheme");
       interpreter('.term.dynamic', true);
       interpreter('.term.lexical', false);

       tabs.on('click', 'ul li', function() {
           select(this).terminal().focus();
           return false;
       });
   });
  </script>
</body>
</html>
