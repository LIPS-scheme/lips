"use strict";(self.webpackChunknew_docs=self.webpackChunknew_docs||[]).push([[1477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"emacs-scheme-regex","metadata":{"permalink":"/blog/emacs-scheme-regex","editUrl":"https://github.com/jcubic/lips-website/tree/docusaurus/docs/blog/2024-03-09-emacs-regex-literals.md","source":"@site/blog/2024-03-09-emacs-regex-literals.md","title":"Scheme Regex literals in Emacs","description":"LIPS Scheme support regular expression literals, but it\'s not the only one implementation that","date":"2024-03-09T00:00:00.000Z","formattedDate":"March 9, 2024","tags":[{"label":"scheme","permalink":"/blog/tags/scheme"},{"label":"emacs","permalink":"/blog/tags/emacs"}],"readingTime":1.05,"hasTruncateMarker":true,"authors":[{"name":"Jakub T. Jankiewicz","title":"LIPS maintainer","url":"https://jakub.jankiewicz.org/","imageURL":"https://github.com/jcubic.png","key":"jcubic"}],"frontMatter":{"slug":"emacs-scheme-regex","title":"Scheme Regex literals in Emacs","authors":"jcubic","tags":["scheme","emacs"]},"unlisted":false,"nextItem":{"title":"LIPS History","permalink":"/blog/lips-history"}},"content":"LIPS Scheme support regular expression literals, but it\'s not the only one implementation that\\nsupport those.  Other implementation includes [Gauche](https://practical-scheme.net/gauche/) and\\n[Kawa](https://www.gnu.org/software/kawa/index.html).\\n\\nUnfortunetlly, you can\'t easily use those regular expressions in [GNU\\nEmacs](https://en.wikipedia.org/wiki/GNU_Emacs), my main editor of choice.\\n\\n\x3c!--truncate--\x3e\\n\\n## The problem\\n\\nThe main problem is when using vertical bar character inside Scheme code in Emacs. GNU Emacs thinks\\nthat the vertical bar is part of the [symbol](/docs/scheme-intro/data-types#symbols):\\n\\n```scheme\\n(let ((str \\"foo bar\\")\\n      (re #/foo|bar/)) ;; | ))\\n  (str.match re))\\n;; ==> #(\\"foo\\")\\n```\\n\\nThis blog (the same as whole website) use modified PrismJS Scheme mode that supports regular\\nexpressions. But in GNU Emacs there was a need to add `|` after a comment and close the lists that\\nwere ignored by Emacs scheme mode (because they were inside symbol).\\n\\n## The solution\\n\\nI asked a [question on emacs-devel mailing\\nlist](https://lists.gnu.org/archive/html/emacs-devel/2024-02/msg00896.html), on how to solve this\\nproblem. I didn\'t get any reply for days, then suddenly someone [reply with this emacs lisp code\\nsnippet](https://lists.gnu.org/archive/html/emacs-devel/2024-03/msg00282.html).\\n\\n```lisp\\n(defun scheme-regex-patch ()\\n  (setq-local\\n   syntax-propertize-function\\n   (lambda (start end)\\n     (goto-char start)\\n     (funcall\\n      (syntax-propertize-rules\\n       ;; For #/regexp/ syntax\\n       (\\"\\\\\\\\(#\\\\\\\\)/\\\\\\\\(\\\\\\\\\\\\\\\\/\\\\\\\\|\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|.\\\\\\\\)*?\\\\\\\\(/\\\\\\\\)\\"\\n        (1 \\"|\\")\\n        (3 \\"|\\"))\\n       ;; For #; comment syntax\\n       (\\"\\\\\\\\(#\\\\\\\\);\\"\\n        (1 (prog1 \\"< cn\\"\\n             (scheme-syntax-propertize-sexp-comment\\n              (point) end)))))\\n      (point) end))))\\n\\n(add-hook \'scheme-mode-hook \'scheme-regex-patch)\\n```\\n\\nAnd this solution works great."},{"id":"lips-history","metadata":{"permalink":"/blog/lips-history","editUrl":"https://github.com/jcubic/lips-website/tree/docusaurus/docs/blog/2024-03-03-lips-history.md","source":"@site/blog/2024-03-03-lips-history.md","title":"LIPS History","description":"This is the first article on LIPS blog. In this article I will write about the history of LIPS","date":"2024-03-03T00:00:00.000Z","formattedDate":"March 3, 2024","tags":[{"label":"lips","permalink":"/blog/tags/lips"},{"label":"scheme","permalink":"/blog/tags/scheme"},{"label":"history","permalink":"/blog/tags/history"}],"readingTime":1.54,"hasTruncateMarker":true,"authors":[{"name":"Jakub T. Jankiewicz","title":"LIPS maintainer","url":"https://jakub.jankiewicz.org/","imageURL":"https://github.com/jcubic.png","key":"jcubic"}],"frontMatter":{"slug":"lips-history","title":"LIPS History","authors":"jcubic","tags":["lips","scheme","history"]},"unlisted":false,"prevItem":{"title":"Scheme Regex literals in Emacs","permalink":"/blog/emacs-scheme-regex"}},"content":"This is the first article on LIPS blog. In this article I will write about the history of LIPS\\nScheme interpreter.\\n\\n\x3c!--truncate--\x3e\\n\\n## What is Scheme?\\n\\nScheme is a dialect of the Lisp. The second oldest programming language still in use (after\\nFortran).  Lisp and Scheme have specific syntax with prefix notation and where everything is a list\\n(at least historically).  It\'s also [Homoiconic](https://en.wikipedia.org/wiki/Homoiconicity), which\\nmeans that code and data have the same represantion. This allows to write programs that modify the\\ncode like it was data.\\n\\n## What is LIPS?\\n\\nLIPS name is a recursive ancronym which stands for **\\"LIPS Is Pretty Simple\\"**. LIPS Scheme is\\nimplementation of Scheme programming language in JavaScript. It adds a lot of stuff on top of Scheme\\nto make it more powerful and easier to interact with JavaScript.\\n\\n## History of LIPS\\n\\nIt all started in February 2018 when I\'ve written the first version of Lisp interpreter. You can\\nstill see the code on [CodePen](https://codepen.io/jcubic/pen/gvvzdp). Then I moved the\\n[development to GitHub](https://github.com/jcubic/lips) and named the project LIPS.  The first release\\n(version 0.2.0) is marked as Mar 2018.\\n\\nAt the beginning it was Lisp based on Scheme, but at one point after version\\n[0.20.1 dated as Jul 1, 2020](https://github.com/jcubic/lips/releases/tag/0.20.1), I\'ve started\\nadding features on devel branch and decided that I want full Scheme implementation. But it turns out\\nthat there are way to many breaking changes to release next version. So I decided that I will\\nrelease it as beta-1.0. Since then, LIPS keep introducing new Beta versions. You can see the\\n[latest release on GitHub](https://github.com/jcubic/lips/releases).\\n\\n## Future of LIPS\\n\\nFor the future plans I want in final version 1.0 are implementation of continutations and Tail Calls\\n(<abbr title=\\"Tail Call Optimization\\">TCO</abbr>) and to be compatibible (more or less) with\\n[R<sup>7</sup>RS specification](https://standards.scheme.org/). To see the progress you can check\\n[1.0 Milestone on GitHub](https://github.com/jcubic/lips/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0)."}]}')}}]);